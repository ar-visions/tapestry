util:
    exists:      import 'lib://tapestry/exists' string > bool
    folders:     import 'lib://tapestry/folders' string > [path]
    overlay:     import 'lib://tapestry/overlay' string string > bool

    # would be nice if import can have another context to import from https queries
    # replace 'tapestry' with 'https://url/method'
    # so it can import a C function or remote; this makes it usable in more contexts
    # data science apps have relevant pulls for data

regex:
    match:       import 'tapestry/match' string string u32 > string

# types are objects
path:
    src:         string
    
    stem:        method
        # if we call this with just path.stem it would throw an error (undefined read)
        regex.match src /^[^.]*/
    
    ext:         method
        return regex.match src /\.([^.]*)$/  # will need to support the encoding of /regex/
    
    exists:      method
        util.exists src

    overlay:     method dest:string
        util.overlay dest src

project:(path this).stem

# 'var' object type is implicit here, but we are essentially using that
externs:
    glm:'https://github.com/g-truc/glm@bf71a83'
        args: ['-DBUILD_STATIC_LIBS=1']

# once a type is made, it would conflict to use it as a variable name
externs.each > e:
    name: e.key
    path extern: 'extern/$name'

    # should support any manner of operation set here, !!e || (e ^ f) for example
    !extern.exists: 
        $(git clone $url $extern)

    # define the build folder, and if it doesnt exist, build the project using its external build system (Make or cmake)
    path build: 'extern/$name/ta-build'
    !build.exists:

# tapestry as a language, is far easier to develop, for simpler, and more relevant as a build language
# its also very relevant as a data science language.  these two things are relevant to AR Visions and creative developers

folders:util.folders '*'
folders.each > folder:
    path:       folder.src
    module:     folder.stem
    spin path module '$project-$module':  # the result is packed in the method name
        name:       spin.name
        module:     spin.module
        src:        spin.src
        cc:         'gcc'
        objects:    []

        # here we define a method to get args for a file of path
        args_for: method file
            file.ext == 'c':
                args: '-std=c11'
            file.ext == 'cpp':
                args: '-std=c++17'
        
        src.each > file:
            object: file.add_ext '.o'
            file.date.exceeds object.date:
                exit_code: $($cc $args -c $file -o $file.o) # $(parsed the same as shell script, but with interpolation of $vars)
                exit_code == 0:
                    objects: objects $file.o

        ar: $(ar rcs $objects)
        ar != 0:
            fail:
                exit_code:-1
                print:'static .a archive creation exit code: $ar'   # should break the entire process and return failure


        # read info on targets in this module (no abstract rel path for this level)
        # path.json 'targets.json': data
        #    data.apps.each: app as file # cast to a different type in the tree; json is typeless; a new var calling a method is casting a type to receive its variable
        #        compile: $($cc $args_for:app) 
        #        compile != 0:
        #            fail:'app compile exit code: $?'