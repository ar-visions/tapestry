/* generated methods interface */
#ifndef _A_INIT_H_
#define _A_INIT_H_

#ifndef NDEBUG
    //#define TC_item(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_item(MEMBER, VALUE) VALUE
#else
    #define TC_item(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_item(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_item(...) _ARG_COUNT_IMPL_item(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_item(...)   _ARG_COUNT_I_item("A-type", ## __VA_ARGS__)
#define _COMBINE_item_(A, B)   A##B
#define _COMBINE_item(A, B)    _COMBINE_item_(A, B)
#define _N_ARGS_item_0( TYPE)
#define _N_ARGS_item_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_item_2( TYPE, a,b) instance->a = TC_item(a,b);
#define _N_ARGS_item_4( TYPE, a,b, c,d) _N_ARGS_item_2(TYPE, a,b) instance->c = TC_item(c,d);
#define _N_ARGS_item_6( TYPE, a,b, c,d, e,f) _N_ARGS_item_4(TYPE, a,b, c,d) instance->e = TC_item(e,f);
#define _N_ARGS_item_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_item_6(TYPE, a,b, c,d, e,f) instance->g = TC_item(g,h);
#define _N_ARGS_item_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_item_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_item(i,j);
#define _N_ARGS_item_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_item_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_item(l,m);
#define _N_ARGS_item_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_item_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_item(n,o);
#define _N_ARGS_item_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_item_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_item(p,q);
#define _N_ARGS_item_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_item_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_item(r,s);
#define _N_ARGS_item_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_item_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_item(t,u);
#define _N_ARGS_item_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_item_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_item(v,w);
#define _N_ARGS_HELPER2_item(TYPE, N, ...)  _COMBINE_item(_N_ARGS_item_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_item(TYPE,...)    _N_ARGS_HELPER2_item(TYPE, _ARG_COUNT_item(__VA_ARGS__), ## __VA_ARGS__)
#define item(...) ({ \
    item instance = (item)A_alloc(typeid(item), 1, true); \
    _N_ARGS_item(item, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_message(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_message(MEMBER, VALUE) VALUE
#else
    #define TC_message(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_message(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_message(...) _ARG_COUNT_IMPL_message(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_message(...)   _ARG_COUNT_I_message("A-type", ## __VA_ARGS__)
#define _COMBINE_message_(A, B)   A##B
#define _COMBINE_message(A, B)    _COMBINE_message_(A, B)
#define _N_ARGS_message_0( TYPE)
#define _N_ARGS_message_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_message_2( TYPE, a,b) instance->a = TC_message(a,b);
#define _N_ARGS_message_4( TYPE, a,b, c,d) _N_ARGS_message_2(TYPE, a,b) instance->c = TC_message(c,d);
#define _N_ARGS_message_6( TYPE, a,b, c,d, e,f) _N_ARGS_message_4(TYPE, a,b, c,d) instance->e = TC_message(e,f);
#define _N_ARGS_message_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_message_6(TYPE, a,b, c,d, e,f) instance->g = TC_message(g,h);
#define _N_ARGS_message_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_message_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_message(i,j);
#define _N_ARGS_message_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_message_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_message(l,m);
#define _N_ARGS_message_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_message_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_message(n,o);
#define _N_ARGS_message_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_message_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_message(p,q);
#define _N_ARGS_message_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_message_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_message(r,s);
#define _N_ARGS_message_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_message_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_message(t,u);
#define _N_ARGS_message_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_message_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_message(v,w);
#define _N_ARGS_HELPER2_message(TYPE, N, ...)  _COMBINE_message(_N_ARGS_message_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_message(TYPE,...)    _N_ARGS_HELPER2_message(TYPE, _ARG_COUNT_message(__VA_ARGS__), ## __VA_ARGS__)
#define message(...) ({ \
    message instance = (message)A_alloc(typeid(message), 1, true); \
    _N_ARGS_message(message, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_list(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_list(MEMBER, VALUE) VALUE
#else
    #define TC_list(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_list(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_list(...) _ARG_COUNT_IMPL_list(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_list(...)   _ARG_COUNT_I_list("A-type", ## __VA_ARGS__)
#define _COMBINE_list_(A, B)   A##B
#define _COMBINE_list(A, B)    _COMBINE_list_(A, B)
#define _N_ARGS_list_0( TYPE)
#define _N_ARGS_list_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_list_2( TYPE, a,b) instance->a = TC_list(a,b);
#define _N_ARGS_list_4( TYPE, a,b, c,d) _N_ARGS_list_2(TYPE, a,b) instance->c = TC_list(c,d);
#define _N_ARGS_list_6( TYPE, a,b, c,d, e,f) _N_ARGS_list_4(TYPE, a,b, c,d) instance->e = TC_list(e,f);
#define _N_ARGS_list_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_list_6(TYPE, a,b, c,d, e,f) instance->g = TC_list(g,h);
#define _N_ARGS_list_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_list_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_list(i,j);
#define _N_ARGS_list_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_list_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_list(l,m);
#define _N_ARGS_list_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_list_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_list(n,o);
#define _N_ARGS_list_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_list_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_list(p,q);
#define _N_ARGS_list_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_list_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_list(r,s);
#define _N_ARGS_list_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_list_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_list(t,u);
#define _N_ARGS_list_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_list_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_list(v,w);
#define _N_ARGS_HELPER2_list(TYPE, N, ...)  _COMBINE_list(_N_ARGS_list_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_list(TYPE,...)    _N_ARGS_HELPER2_list(TYPE, _ARG_COUNT_list(__VA_ARGS__), ## __VA_ARGS__)
#define list(...) ({ \
    list instance = (list)A_alloc(typeid(list), 1, true); \
    _N_ARGS_list(list, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_buffer(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_buffer(MEMBER, VALUE) VALUE
#else
    #define TC_buffer(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_buffer(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_buffer(...) _ARG_COUNT_IMPL_buffer(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_buffer(...)   _ARG_COUNT_I_buffer("A-type", ## __VA_ARGS__)
#define _COMBINE_buffer_(A, B)   A##B
#define _COMBINE_buffer(A, B)    _COMBINE_buffer_(A, B)
#define _N_ARGS_buffer_0( TYPE)
#define _N_ARGS_buffer_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_buffer_2( TYPE, a,b) instance->a = TC_buffer(a,b);
#define _N_ARGS_buffer_4( TYPE, a,b, c,d) _N_ARGS_buffer_2(TYPE, a,b) instance->c = TC_buffer(c,d);
#define _N_ARGS_buffer_6( TYPE, a,b, c,d, e,f) _N_ARGS_buffer_4(TYPE, a,b, c,d) instance->e = TC_buffer(e,f);
#define _N_ARGS_buffer_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_buffer_6(TYPE, a,b, c,d, e,f) instance->g = TC_buffer(g,h);
#define _N_ARGS_buffer_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_buffer_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_buffer(i,j);
#define _N_ARGS_buffer_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_buffer_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_buffer(l,m);
#define _N_ARGS_buffer_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_buffer_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_buffer(n,o);
#define _N_ARGS_buffer_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_buffer_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_buffer(p,q);
#define _N_ARGS_buffer_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_buffer_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_buffer(r,s);
#define _N_ARGS_buffer_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_buffer_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_buffer(t,u);
#define _N_ARGS_buffer_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_buffer_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_buffer(v,w);
#define _N_ARGS_HELPER2_buffer(TYPE, N, ...)  _COMBINE_buffer(_N_ARGS_buffer_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_buffer(TYPE,...)    _N_ARGS_HELPER2_buffer(TYPE, _ARG_COUNT_buffer(__VA_ARGS__), ## __VA_ARGS__)
#define buffer(...) ({ \
    buffer instance = (buffer)A_alloc(typeid(buffer), 1, true); \
    _N_ARGS_buffer(buffer, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_file(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_file(MEMBER, VALUE) VALUE
#else
    #define TC_file(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_file(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_file(...) _ARG_COUNT_IMPL_file(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_file(...)   _ARG_COUNT_I_file("A-type", ## __VA_ARGS__)
#define _COMBINE_file_(A, B)   A##B
#define _COMBINE_file(A, B)    _COMBINE_file_(A, B)
#define _N_ARGS_file_0( TYPE)
#define _N_ARGS_file_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_file_2( TYPE, a,b) instance->a = TC_file(a,b);
#define _N_ARGS_file_4( TYPE, a,b, c,d) _N_ARGS_file_2(TYPE, a,b) instance->c = TC_file(c,d);
#define _N_ARGS_file_6( TYPE, a,b, c,d, e,f) _N_ARGS_file_4(TYPE, a,b, c,d) instance->e = TC_file(e,f);
#define _N_ARGS_file_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_file_6(TYPE, a,b, c,d, e,f) instance->g = TC_file(g,h);
#define _N_ARGS_file_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_file_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_file(i,j);
#define _N_ARGS_file_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_file_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_file(l,m);
#define _N_ARGS_file_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_file_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_file(n,o);
#define _N_ARGS_file_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_file_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_file(p,q);
#define _N_ARGS_file_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_file_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_file(r,s);
#define _N_ARGS_file_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_file_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_file(t,u);
#define _N_ARGS_file_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_file_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_file(v,w);
#define _N_ARGS_HELPER2_file(TYPE, N, ...)  _COMBINE_file(_N_ARGS_file_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_file(TYPE,...)    _N_ARGS_HELPER2_file(TYPE, _ARG_COUNT_file(__VA_ARGS__), ## __VA_ARGS__)
#define file(...) ({ \
    file instance = (file)A_alloc(typeid(file), 1, true); \
    _N_ARGS_file(file, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_shape(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_shape(MEMBER, VALUE) VALUE
#else
    #define TC_shape(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_shape(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_shape(...) _ARG_COUNT_IMPL_shape(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_shape(...)   _ARG_COUNT_I_shape("A-type", ## __VA_ARGS__)
#define _COMBINE_shape_(A, B)   A##B
#define _COMBINE_shape(A, B)    _COMBINE_shape_(A, B)
#define _N_ARGS_shape_0( TYPE)
#define _N_ARGS_shape_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_shape_2( TYPE, a,b) instance->a = TC_shape(a,b);
#define _N_ARGS_shape_4( TYPE, a,b, c,d) _N_ARGS_shape_2(TYPE, a,b) instance->c = TC_shape(c,d);
#define _N_ARGS_shape_6( TYPE, a,b, c,d, e,f) _N_ARGS_shape_4(TYPE, a,b, c,d) instance->e = TC_shape(e,f);
#define _N_ARGS_shape_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_shape_6(TYPE, a,b, c,d, e,f) instance->g = TC_shape(g,h);
#define _N_ARGS_shape_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_shape_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_shape(i,j);
#define _N_ARGS_shape_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_shape_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_shape(l,m);
#define _N_ARGS_shape_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_shape_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_shape(n,o);
#define _N_ARGS_shape_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_shape_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_shape(p,q);
#define _N_ARGS_shape_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_shape_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_shape(r,s);
#define _N_ARGS_shape_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_shape_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_shape(t,u);
#define _N_ARGS_shape_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_shape_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_shape(v,w);
#define _N_ARGS_HELPER2_shape(TYPE, N, ...)  _COMBINE_shape(_N_ARGS_shape_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_shape(TYPE,...)    _N_ARGS_HELPER2_shape(TYPE, _ARG_COUNT_shape(__VA_ARGS__), ## __VA_ARGS__)
#define shape(...) ({ \
    shape instance = (shape)A_alloc(typeid(shape), 1, true); \
    _N_ARGS_shape(shape, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_vector(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_vector(MEMBER, VALUE) VALUE
#else
    #define TC_vector(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_vector(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_vector(...) _ARG_COUNT_IMPL_vector(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_vector(...)   _ARG_COUNT_I_vector("A-type", ## __VA_ARGS__)
#define _COMBINE_vector_(A, B)   A##B
#define _COMBINE_vector(A, B)    _COMBINE_vector_(A, B)
#define _N_ARGS_vector_0( TYPE)
#define _N_ARGS_vector_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_vector_2( TYPE, a,b) instance->a = TC_vector(a,b);
#define _N_ARGS_vector_4( TYPE, a,b, c,d) _N_ARGS_vector_2(TYPE, a,b) instance->c = TC_vector(c,d);
#define _N_ARGS_vector_6( TYPE, a,b, c,d, e,f) _N_ARGS_vector_4(TYPE, a,b, c,d) instance->e = TC_vector(e,f);
#define _N_ARGS_vector_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_vector_6(TYPE, a,b, c,d, e,f) instance->g = TC_vector(g,h);
#define _N_ARGS_vector_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_vector_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_vector(i,j);
#define _N_ARGS_vector_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_vector_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_vector(l,m);
#define _N_ARGS_vector_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_vector_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_vector(n,o);
#define _N_ARGS_vector_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_vector_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_vector(p,q);
#define _N_ARGS_vector_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_vector_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_vector(r,s);
#define _N_ARGS_vector_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_vector_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_vector(t,u);
#define _N_ARGS_vector_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_vector_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_vector(v,w);
#define _N_ARGS_HELPER2_vector(TYPE, N, ...)  _COMBINE_vector(_N_ARGS_vector_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_vector(TYPE,...)    _N_ARGS_HELPER2_vector(TYPE, _ARG_COUNT_vector(__VA_ARGS__), ## __VA_ARGS__)
#define vector(...) ({ \
    vector instance = (vector)A_alloc(typeid(vector), 1, true); \
    _N_ARGS_vector(vector, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_subprocedure(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_subprocedure(MEMBER, VALUE) VALUE
#else
    #define TC_subprocedure(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_subprocedure(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_subprocedure(...) _ARG_COUNT_IMPL_subprocedure(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_subprocedure(...)   _ARG_COUNT_I_subprocedure("A-type", ## __VA_ARGS__)
#define _COMBINE_subprocedure_(A, B)   A##B
#define _COMBINE_subprocedure(A, B)    _COMBINE_subprocedure_(A, B)
#define _N_ARGS_subprocedure_0( TYPE)
#define _N_ARGS_subprocedure_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_subprocedure_2( TYPE, a,b) instance->a = TC_subprocedure(a,b);
#define _N_ARGS_subprocedure_4( TYPE, a,b, c,d) _N_ARGS_subprocedure_2(TYPE, a,b) instance->c = TC_subprocedure(c,d);
#define _N_ARGS_subprocedure_6( TYPE, a,b, c,d, e,f) _N_ARGS_subprocedure_4(TYPE, a,b, c,d) instance->e = TC_subprocedure(e,f);
#define _N_ARGS_subprocedure_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_subprocedure_6(TYPE, a,b, c,d, e,f) instance->g = TC_subprocedure(g,h);
#define _N_ARGS_subprocedure_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_subprocedure_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_subprocedure(i,j);
#define _N_ARGS_subprocedure_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_subprocedure_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_subprocedure(l,m);
#define _N_ARGS_subprocedure_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_subprocedure_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_subprocedure(n,o);
#define _N_ARGS_subprocedure_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_subprocedure_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_subprocedure(p,q);
#define _N_ARGS_subprocedure_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_subprocedure_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_subprocedure(r,s);
#define _N_ARGS_subprocedure_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_subprocedure_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_subprocedure(t,u);
#define _N_ARGS_subprocedure_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_subprocedure_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_subprocedure(v,w);
#define _N_ARGS_HELPER2_subprocedure(TYPE, N, ...)  _COMBINE_subprocedure(_N_ARGS_subprocedure_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_subprocedure(TYPE,...)    _N_ARGS_HELPER2_subprocedure(TYPE, _ARG_COUNT_subprocedure(__VA_ARGS__), ## __VA_ARGS__)
#define subprocedure(...) ({ \
    subprocedure instance = (subprocedure)A_alloc(typeid(subprocedure), 1, true); \
    _N_ARGS_subprocedure(subprocedure, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_array(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_array(MEMBER, VALUE) VALUE
#else
    #define TC_array(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_array(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_array(...) _ARG_COUNT_IMPL_array(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_array(...)   _ARG_COUNT_I_array("A-type", ## __VA_ARGS__)
#define _COMBINE_array_(A, B)   A##B
#define _COMBINE_array(A, B)    _COMBINE_array_(A, B)
#define _N_ARGS_array_0( TYPE)
#define _N_ARGS_array_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_array_2( TYPE, a,b) instance->a = TC_array(a,b);
#define _N_ARGS_array_4( TYPE, a,b, c,d) _N_ARGS_array_2(TYPE, a,b) instance->c = TC_array(c,d);
#define _N_ARGS_array_6( TYPE, a,b, c,d, e,f) _N_ARGS_array_4(TYPE, a,b, c,d) instance->e = TC_array(e,f);
#define _N_ARGS_array_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_array_6(TYPE, a,b, c,d, e,f) instance->g = TC_array(g,h);
#define _N_ARGS_array_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_array_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_array(i,j);
#define _N_ARGS_array_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_array_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_array(l,m);
#define _N_ARGS_array_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_array_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_array(n,o);
#define _N_ARGS_array_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_array_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_array(p,q);
#define _N_ARGS_array_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_array_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_array(r,s);
#define _N_ARGS_array_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_array_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_array(t,u);
#define _N_ARGS_array_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_array_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_array(v,w);
#define _N_ARGS_HELPER2_array(TYPE, N, ...)  _COMBINE_array(_N_ARGS_array_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_array(TYPE,...)    _N_ARGS_HELPER2_array(TYPE, _ARG_COUNT_array(__VA_ARGS__), ## __VA_ARGS__)
#define array(...) ({ \
    array instance = (array)A_alloc(typeid(array), 1, true); \
    _N_ARGS_array(array, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_ATypes(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_ATypes(MEMBER, VALUE) VALUE
#else
    #define TC_ATypes(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_ATypes(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_ATypes(...) _ARG_COUNT_IMPL_ATypes(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_ATypes(...)   _ARG_COUNT_I_ATypes("A-type", ## __VA_ARGS__)
#define _COMBINE_ATypes_(A, B)   A##B
#define _COMBINE_ATypes(A, B)    _COMBINE_ATypes_(A, B)
#define _N_ARGS_ATypes_0( TYPE)
#define _N_ARGS_ATypes_1( TYPE, a)
#define _N_ARGS_ATypes_2( TYPE, a,b) instance->a = TC_ATypes(a,b);
#define _N_ARGS_ATypes_4( TYPE, a,b, c,d) _N_ARGS_ATypes_2(TYPE, a,b) instance->c = TC_ATypes(c,d);
#define _N_ARGS_ATypes_6( TYPE, a,b, c,d, e,f) _N_ARGS_ATypes_4(TYPE, a,b, c,d) instance->e = TC_ATypes(e,f);
#define _N_ARGS_ATypes_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_ATypes_6(TYPE, a,b, c,d, e,f) instance->g = TC_ATypes(g,h);
#define _N_ARGS_ATypes_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_ATypes_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_ATypes(i,j);
#define _N_ARGS_ATypes_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_ATypes_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_ATypes(l,m);
#define _N_ARGS_ATypes_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_ATypes_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_ATypes(n,o);
#define _N_ARGS_ATypes_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_ATypes_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_ATypes(p,q);
#define _N_ARGS_ATypes_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_ATypes_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_ATypes(r,s);
#define _N_ARGS_ATypes_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_ATypes_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_ATypes(t,u);
#define _N_ARGS_ATypes_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_ATypes_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_ATypes(v,w);
#define _N_ARGS_HELPER2_ATypes(TYPE, N, ...)  _COMBINE_ATypes(_N_ARGS_ATypes_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_ATypes(TYPE,...)    _N_ARGS_HELPER2_ATypes(TYPE, _ARG_COUNT_ATypes(__VA_ARGS__), ## __VA_ARGS__)
#define ATypes(...) ({ \
    ATypes instance = (ATypes)A_alloc(typeid(ATypes), 1, true); \
    _N_ARGS_ATypes(ATypes, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_AF(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_AF(MEMBER, VALUE) VALUE
#else
    #define TC_AF(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_AF(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_AF(...) _ARG_COUNT_IMPL_AF(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_AF(...)   _ARG_COUNT_I_AF("A-type", ## __VA_ARGS__)
#define _COMBINE_AF_(A, B)   A##B
#define _COMBINE_AF(A, B)    _COMBINE_AF_(A, B)
#define _N_ARGS_AF_0( TYPE)
#define _N_ARGS_AF_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_AF_2( TYPE, a,b) instance->a = TC_AF(a,b);
#define _N_ARGS_AF_4( TYPE, a,b, c,d) _N_ARGS_AF_2(TYPE, a,b) instance->c = TC_AF(c,d);
#define _N_ARGS_AF_6( TYPE, a,b, c,d, e,f) _N_ARGS_AF_4(TYPE, a,b, c,d) instance->e = TC_AF(e,f);
#define _N_ARGS_AF_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_AF_6(TYPE, a,b, c,d, e,f) instance->g = TC_AF(g,h);
#define _N_ARGS_AF_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_AF_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_AF(i,j);
#define _N_ARGS_AF_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_AF_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_AF(l,m);
#define _N_ARGS_AF_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_AF_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_AF(n,o);
#define _N_ARGS_AF_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_AF_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_AF(p,q);
#define _N_ARGS_AF_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_AF_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_AF(r,s);
#define _N_ARGS_AF_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_AF_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_AF(t,u);
#define _N_ARGS_AF_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_AF_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_AF(v,w);
#define _N_ARGS_HELPER2_AF(TYPE, N, ...)  _COMBINE_AF(_N_ARGS_AF_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_AF(TYPE,...)    _N_ARGS_HELPER2_AF(TYPE, _ARG_COUNT_AF(__VA_ARGS__), ## __VA_ARGS__)
#define AF(...) ({ \
    AF instance = (AF)A_alloc(typeid(AF), 1, true); \
    _N_ARGS_AF(AF, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_hashmap(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_hashmap(MEMBER, VALUE) VALUE
#else
    #define TC_hashmap(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_hashmap(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_hashmap(...) _ARG_COUNT_IMPL_hashmap(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_hashmap(...)   _ARG_COUNT_I_hashmap("A-type", ## __VA_ARGS__)
#define _COMBINE_hashmap_(A, B)   A##B
#define _COMBINE_hashmap(A, B)    _COMBINE_hashmap_(A, B)
#define _N_ARGS_hashmap_0( TYPE)
#define _N_ARGS_hashmap_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_hashmap_2( TYPE, a,b) instance->a = TC_hashmap(a,b);
#define _N_ARGS_hashmap_4( TYPE, a,b, c,d) _N_ARGS_hashmap_2(TYPE, a,b) instance->c = TC_hashmap(c,d);
#define _N_ARGS_hashmap_6( TYPE, a,b, c,d, e,f) _N_ARGS_hashmap_4(TYPE, a,b, c,d) instance->e = TC_hashmap(e,f);
#define _N_ARGS_hashmap_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_hashmap_6(TYPE, a,b, c,d, e,f) instance->g = TC_hashmap(g,h);
#define _N_ARGS_hashmap_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_hashmap_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_hashmap(i,j);
#define _N_ARGS_hashmap_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_hashmap_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_hashmap(l,m);
#define _N_ARGS_hashmap_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_hashmap_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_hashmap(n,o);
#define _N_ARGS_hashmap_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_hashmap_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_hashmap(p,q);
#define _N_ARGS_hashmap_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_hashmap_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_hashmap(r,s);
#define _N_ARGS_hashmap_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_hashmap_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_hashmap(t,u);
#define _N_ARGS_hashmap_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_hashmap_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_hashmap(v,w);
#define _N_ARGS_HELPER2_hashmap(TYPE, N, ...)  _COMBINE_hashmap(_N_ARGS_hashmap_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_hashmap(TYPE,...)    _N_ARGS_HELPER2_hashmap(TYPE, _ARG_COUNT_hashmap(__VA_ARGS__), ## __VA_ARGS__)
#define hashmap(...) ({ \
    hashmap instance = (hashmap)A_alloc(typeid(hashmap), 1, true); \
    _N_ARGS_hashmap(hashmap, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_pair(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_pair(MEMBER, VALUE) VALUE
#else
    #define TC_pair(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_pair(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_pair(...) _ARG_COUNT_IMPL_pair(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_pair(...)   _ARG_COUNT_I_pair("A-type", ## __VA_ARGS__)
#define _COMBINE_pair_(A, B)   A##B
#define _COMBINE_pair(A, B)    _COMBINE_pair_(A, B)
#define _N_ARGS_pair_0( TYPE)
#define _N_ARGS_pair_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_pair_2( TYPE, a,b) instance->a = TC_pair(a,b);
#define _N_ARGS_pair_4( TYPE, a,b, c,d) _N_ARGS_pair_2(TYPE, a,b) instance->c = TC_pair(c,d);
#define _N_ARGS_pair_6( TYPE, a,b, c,d, e,f) _N_ARGS_pair_4(TYPE, a,b, c,d) instance->e = TC_pair(e,f);
#define _N_ARGS_pair_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_pair_6(TYPE, a,b, c,d, e,f) instance->g = TC_pair(g,h);
#define _N_ARGS_pair_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_pair_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_pair(i,j);
#define _N_ARGS_pair_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_pair_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_pair(l,m);
#define _N_ARGS_pair_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_pair_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_pair(n,o);
#define _N_ARGS_pair_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_pair_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_pair(p,q);
#define _N_ARGS_pair_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_pair_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_pair(r,s);
#define _N_ARGS_pair_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_pair_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_pair(t,u);
#define _N_ARGS_pair_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_pair_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_pair(v,w);
#define _N_ARGS_HELPER2_pair(TYPE, N, ...)  _COMBINE_pair(_N_ARGS_pair_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_pair(TYPE,...)    _N_ARGS_HELPER2_pair(TYPE, _ARG_COUNT_pair(__VA_ARGS__), ## __VA_ARGS__)
#define pair(...) ({ \
    pair instance = (pair)A_alloc(typeid(pair), 1, true); \
    _N_ARGS_pair(pair, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_map(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_map(MEMBER, VALUE) VALUE
#else
    #define TC_map(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_map(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_map(...) _ARG_COUNT_IMPL_map(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_map(...)   _ARG_COUNT_I_map("A-type", ## __VA_ARGS__)
#define _COMBINE_map_(A, B)   A##B
#define _COMBINE_map(A, B)    _COMBINE_map_(A, B)
#define _N_ARGS_map_0( TYPE)
#define _N_ARGS_map_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_map_2( TYPE, a,b) instance->a = TC_map(a,b);
#define _N_ARGS_map_4( TYPE, a,b, c,d) _N_ARGS_map_2(TYPE, a,b) instance->c = TC_map(c,d);
#define _N_ARGS_map_6( TYPE, a,b, c,d, e,f) _N_ARGS_map_4(TYPE, a,b, c,d) instance->e = TC_map(e,f);
#define _N_ARGS_map_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_map_6(TYPE, a,b, c,d, e,f) instance->g = TC_map(g,h);
#define _N_ARGS_map_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_map_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_map(i,j);
#define _N_ARGS_map_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_map_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_map(l,m);
#define _N_ARGS_map_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_map_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_map(n,o);
#define _N_ARGS_map_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_map_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_map(p,q);
#define _N_ARGS_map_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_map_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_map(r,s);
#define _N_ARGS_map_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_map_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_map(t,u);
#define _N_ARGS_map_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_map_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_map(v,w);
#define _N_ARGS_HELPER2_map(TYPE, N, ...)  _COMBINE_map(_N_ARGS_map_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_map(TYPE,...)    _N_ARGS_HELPER2_map(TYPE, _ARG_COUNT_map(__VA_ARGS__), ## __VA_ARGS__)
#define map(...) ({ \
    map instance = (map)A_alloc(typeid(map), 1, true); \
    _N_ARGS_map(map, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_fn(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_fn(MEMBER, VALUE) VALUE
#else
    #define TC_fn(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_fn(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_fn(...) _ARG_COUNT_IMPL_fn(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_fn(...)   _ARG_COUNT_I_fn("A-type", ## __VA_ARGS__)
#define _COMBINE_fn_(A, B)   A##B
#define _COMBINE_fn(A, B)    _COMBINE_fn_(A, B)
#define _N_ARGS_fn_0( TYPE)
#define _N_ARGS_fn_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_fn_2( TYPE, a,b) instance->a = TC_fn(a,b);
#define _N_ARGS_fn_4( TYPE, a,b, c,d) _N_ARGS_fn_2(TYPE, a,b) instance->c = TC_fn(c,d);
#define _N_ARGS_fn_6( TYPE, a,b, c,d, e,f) _N_ARGS_fn_4(TYPE, a,b, c,d) instance->e = TC_fn(e,f);
#define _N_ARGS_fn_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_fn_6(TYPE, a,b, c,d, e,f) instance->g = TC_fn(g,h);
#define _N_ARGS_fn_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_fn_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_fn(i,j);
#define _N_ARGS_fn_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_fn_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_fn(l,m);
#define _N_ARGS_fn_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_fn_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_fn(n,o);
#define _N_ARGS_fn_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_fn_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_fn(p,q);
#define _N_ARGS_fn_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_fn_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_fn(r,s);
#define _N_ARGS_fn_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_fn_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_fn(t,u);
#define _N_ARGS_fn_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_fn_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_fn(v,w);
#define _N_ARGS_HELPER2_fn(TYPE, N, ...)  _COMBINE_fn(_N_ARGS_fn_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_fn(TYPE,...)    _N_ARGS_HELPER2_fn(TYPE, _ARG_COUNT_fn(__VA_ARGS__), ## __VA_ARGS__)
#define fn(...) ({ \
    fn instance = (fn)A_alloc(typeid(fn), 1, true); \
    _N_ARGS_fn(fn, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_string(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_string(MEMBER, VALUE) VALUE
#else
    #define TC_string(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_string(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_string(...) _ARG_COUNT_IMPL_string(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_string(...)   _ARG_COUNT_I_string("A-type", ## __VA_ARGS__)
#define _COMBINE_string_(A, B)   A##B
#define _COMBINE_string(A, B)    _COMBINE_string_(A, B)
#define _N_ARGS_string_0( TYPE)
#define _N_ARGS_string_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_string_2( TYPE, a,b) instance->a = TC_string(a,b);
#define _N_ARGS_string_4( TYPE, a,b, c,d) _N_ARGS_string_2(TYPE, a,b) instance->c = TC_string(c,d);
#define _N_ARGS_string_6( TYPE, a,b, c,d, e,f) _N_ARGS_string_4(TYPE, a,b, c,d) instance->e = TC_string(e,f);
#define _N_ARGS_string_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_string_6(TYPE, a,b, c,d, e,f) instance->g = TC_string(g,h);
#define _N_ARGS_string_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_string_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_string(i,j);
#define _N_ARGS_string_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_string_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_string(l,m);
#define _N_ARGS_string_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_string_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_string(n,o);
#define _N_ARGS_string_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_string_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_string(p,q);
#define _N_ARGS_string_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_string_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_string(r,s);
#define _N_ARGS_string_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_string_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_string(t,u);
#define _N_ARGS_string_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_string_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_string(v,w);
#define _N_ARGS_HELPER2_string(TYPE, N, ...)  _COMBINE_string(_N_ARGS_string_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_string(TYPE,...)    _N_ARGS_HELPER2_string(TYPE, _ARG_COUNT_string(__VA_ARGS__), ## __VA_ARGS__)
#define string(...) ({ \
    string instance = (string)A_alloc(typeid(string), 1, true); \
    _N_ARGS_string(string, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_watch(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_watch(MEMBER, VALUE) VALUE
#else
    #define TC_watch(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_watch(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_watch(...) _ARG_COUNT_IMPL_watch(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_watch(...)   _ARG_COUNT_I_watch("A-type", ## __VA_ARGS__)
#define _COMBINE_watch_(A, B)   A##B
#define _COMBINE_watch(A, B)    _COMBINE_watch_(A, B)
#define _N_ARGS_watch_0( TYPE)
#define _N_ARGS_watch_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_watch_2( TYPE, a,b) instance->a = TC_watch(a,b);
#define _N_ARGS_watch_4( TYPE, a,b, c,d) _N_ARGS_watch_2(TYPE, a,b) instance->c = TC_watch(c,d);
#define _N_ARGS_watch_6( TYPE, a,b, c,d, e,f) _N_ARGS_watch_4(TYPE, a,b, c,d) instance->e = TC_watch(e,f);
#define _N_ARGS_watch_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_watch_6(TYPE, a,b, c,d, e,f) instance->g = TC_watch(g,h);
#define _N_ARGS_watch_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_watch_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_watch(i,j);
#define _N_ARGS_watch_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_watch_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_watch(l,m);
#define _N_ARGS_watch_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_watch_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_watch(n,o);
#define _N_ARGS_watch_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_watch_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_watch(p,q);
#define _N_ARGS_watch_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_watch_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_watch(r,s);
#define _N_ARGS_watch_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_watch_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_watch(t,u);
#define _N_ARGS_watch_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_watch_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_watch(v,w);
#define _N_ARGS_HELPER2_watch(TYPE, N, ...)  _COMBINE_watch(_N_ARGS_watch_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_watch(TYPE,...)    _N_ARGS_HELPER2_watch(TYPE, _ARG_COUNT_watch(__VA_ARGS__), ## __VA_ARGS__)
#define watch(...) ({ \
    watch instance = (watch)A_alloc(typeid(watch), 1, true); \
    _N_ARGS_watch(watch, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_unit(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_unit(MEMBER, VALUE) VALUE
#else
    #define TC_unit(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_unit(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_unit(...) _ARG_COUNT_IMPL_unit(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_unit(...)   _ARG_COUNT_I_unit("A-type", ## __VA_ARGS__)
#define _COMBINE_unit_(A, B)   A##B
#define _COMBINE_unit(A, B)    _COMBINE_unit_(A, B)
#define _N_ARGS_unit_0( TYPE)
#define _N_ARGS_unit_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_unit_2( TYPE, a,b) instance->a = TC_unit(a,b);
#define _N_ARGS_unit_4( TYPE, a,b, c,d) _N_ARGS_unit_2(TYPE, a,b) instance->c = TC_unit(c,d);
#define _N_ARGS_unit_6( TYPE, a,b, c,d, e,f) _N_ARGS_unit_4(TYPE, a,b, c,d) instance->e = TC_unit(e,f);
#define _N_ARGS_unit_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_unit_6(TYPE, a,b, c,d, e,f) instance->g = TC_unit(g,h);
#define _N_ARGS_unit_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_unit_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_unit(i,j);
#define _N_ARGS_unit_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_unit_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_unit(l,m);
#define _N_ARGS_unit_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_unit_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_unit(n,o);
#define _N_ARGS_unit_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_unit_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_unit(p,q);
#define _N_ARGS_unit_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_unit_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_unit(r,s);
#define _N_ARGS_unit_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_unit_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_unit(t,u);
#define _N_ARGS_unit_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_unit_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_unit(v,w);
#define _N_ARGS_HELPER2_unit(TYPE, N, ...)  _COMBINE_unit(_N_ARGS_unit_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_unit(TYPE,...)    _N_ARGS_HELPER2_unit(TYPE, _ARG_COUNT_unit(__VA_ARGS__), ## __VA_ARGS__)
#define unit(...) ({ \
    unit instance = (unit)A_alloc(typeid(unit), 1, true); \
    _N_ARGS_unit(unit, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_mutex(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_mutex(MEMBER, VALUE) VALUE
#else
    #define TC_mutex(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_mutex(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_mutex(...) _ARG_COUNT_IMPL_mutex(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_mutex(...)   _ARG_COUNT_I_mutex("A-type", ## __VA_ARGS__)
#define _COMBINE_mutex_(A, B)   A##B
#define _COMBINE_mutex(A, B)    _COMBINE_mutex_(A, B)
#define _N_ARGS_mutex_0( TYPE)
#define _N_ARGS_mutex_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_mutex_2( TYPE, a,b) instance->a = TC_mutex(a,b);
#define _N_ARGS_mutex_4( TYPE, a,b, c,d) _N_ARGS_mutex_2(TYPE, a,b) instance->c = TC_mutex(c,d);
#define _N_ARGS_mutex_6( TYPE, a,b, c,d, e,f) _N_ARGS_mutex_4(TYPE, a,b, c,d) instance->e = TC_mutex(e,f);
#define _N_ARGS_mutex_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_mutex_6(TYPE, a,b, c,d, e,f) instance->g = TC_mutex(g,h);
#define _N_ARGS_mutex_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_mutex_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_mutex(i,j);
#define _N_ARGS_mutex_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_mutex_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_mutex(l,m);
#define _N_ARGS_mutex_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_mutex_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_mutex(n,o);
#define _N_ARGS_mutex_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_mutex_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_mutex(p,q);
#define _N_ARGS_mutex_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_mutex_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_mutex(r,s);
#define _N_ARGS_mutex_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_mutex_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_mutex(t,u);
#define _N_ARGS_mutex_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_mutex_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_mutex(v,w);
#define _N_ARGS_HELPER2_mutex(TYPE, N, ...)  _COMBINE_mutex(_N_ARGS_mutex_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_mutex(TYPE,...)    _N_ARGS_HELPER2_mutex(TYPE, _ARG_COUNT_mutex(__VA_ARGS__), ## __VA_ARGS__)
#define mutex(...) ({ \
    mutex instance = (mutex)A_alloc(typeid(mutex), 1, true); \
    _N_ARGS_mutex(mutex, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_path(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_path(MEMBER, VALUE) VALUE
#else
    #define TC_path(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_path(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_path(...) _ARG_COUNT_IMPL_path(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_path(...)   _ARG_COUNT_I_path("A-type", ## __VA_ARGS__)
#define _COMBINE_path_(A, B)   A##B
#define _COMBINE_path(A, B)    _COMBINE_path_(A, B)
#define _N_ARGS_path_0( TYPE)
#define _N_ARGS_path_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_path_2( TYPE, a,b) instance->a = TC_path(a,b);
#define _N_ARGS_path_4( TYPE, a,b, c,d) _N_ARGS_path_2(TYPE, a,b) instance->c = TC_path(c,d);
#define _N_ARGS_path_6( TYPE, a,b, c,d, e,f) _N_ARGS_path_4(TYPE, a,b, c,d) instance->e = TC_path(e,f);
#define _N_ARGS_path_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_path_6(TYPE, a,b, c,d, e,f) instance->g = TC_path(g,h);
#define _N_ARGS_path_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_path_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_path(i,j);
#define _N_ARGS_path_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_path_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_path(l,m);
#define _N_ARGS_path_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_path_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_path(n,o);
#define _N_ARGS_path_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_path_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_path(p,q);
#define _N_ARGS_path_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_path_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_path(r,s);
#define _N_ARGS_path_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_path_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_path(t,u);
#define _N_ARGS_path_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_path_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_path(v,w);
#define _N_ARGS_HELPER2_path(TYPE, N, ...)  _COMBINE_path(_N_ARGS_path_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_path(TYPE,...)    _N_ARGS_HELPER2_path(TYPE, _ARG_COUNT_path(__VA_ARGS__), ## __VA_ARGS__)
#define path(...) ({ \
    path instance = (path)A_alloc(typeid(path), 1, true); \
    _N_ARGS_path(path, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_line(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_line(MEMBER, VALUE) VALUE
#else
    #define TC_line(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_line(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_line(...) _ARG_COUNT_IMPL_line(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_line(...)   _ARG_COUNT_I_line("A-type", ## __VA_ARGS__)
#define _COMBINE_line_(A, B)   A##B
#define _COMBINE_line(A, B)    _COMBINE_line_(A, B)
#define _N_ARGS_line_0( TYPE)
#define _N_ARGS_line_1( TYPE, a) _Generic((a), TYPE##_schema(TYPE, GENERICS, object) const void *: (void)0)(instance, a)
#define _N_ARGS_line_2( TYPE, a,b) instance->a = TC_line(a,b);
#define _N_ARGS_line_4( TYPE, a,b, c,d) _N_ARGS_line_2(TYPE, a,b) instance->c = TC_line(c,d);
#define _N_ARGS_line_6( TYPE, a,b, c,d, e,f) _N_ARGS_line_4(TYPE, a,b, c,d) instance->e = TC_line(e,f);
#define _N_ARGS_line_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_line_6(TYPE, a,b, c,d, e,f) instance->g = TC_line(g,h);
#define _N_ARGS_line_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_line_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_line(i,j);
#define _N_ARGS_line_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_line_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_line(l,m);
#define _N_ARGS_line_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_line_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_line(n,o);
#define _N_ARGS_line_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_line_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_line(p,q);
#define _N_ARGS_line_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_line_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_line(r,s);
#define _N_ARGS_line_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_line_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_line(t,u);
#define _N_ARGS_line_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_line_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_line(v,w);
#define _N_ARGS_HELPER2_line(TYPE, N, ...)  _COMBINE_line(_N_ARGS_line_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_line(TYPE,...)    _N_ARGS_HELPER2_line(TYPE, _ARG_COUNT_line(__VA_ARGS__), ## __VA_ARGS__)
#define line(...) ({ \
    line instance = (line)A_alloc(typeid(line), 1, true); \
    _N_ARGS_line(line, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_array_string(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_array_string(MEMBER, VALUE) VALUE
#else
    #define TC_array_string(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_array_string(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_array_string(...) _ARG_COUNT_IMPL_array_string(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_array_string(...)   _ARG_COUNT_I_array_string("A-type", ## __VA_ARGS__)
#define _COMBINE_array_string_(A, B)   A##B
#define _COMBINE_array_string(A, B)    _COMBINE_array_string_(A, B)
#define _N_ARGS_array_string_0( TYPE)
#define _N_ARGS_array_string_1( TYPE, a)
#define _N_ARGS_array_string_2( TYPE, a,b) instance->a = TC_array_string(a,b);
#define _N_ARGS_array_string_4( TYPE, a,b, c,d) _N_ARGS_array_string_2(TYPE, a,b) instance->c = TC_array_string(c,d);
#define _N_ARGS_array_string_6( TYPE, a,b, c,d, e,f) _N_ARGS_array_string_4(TYPE, a,b, c,d) instance->e = TC_array_string(e,f);
#define _N_ARGS_array_string_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_array_string_6(TYPE, a,b, c,d, e,f) instance->g = TC_array_string(g,h);
#define _N_ARGS_array_string_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_array_string_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_array_string(i,j);
#define _N_ARGS_array_string_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_array_string_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_array_string(l,m);
#define _N_ARGS_array_string_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_array_string_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_array_string(n,o);
#define _N_ARGS_array_string_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_array_string_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_array_string(p,q);
#define _N_ARGS_array_string_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_array_string_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_array_string(r,s);
#define _N_ARGS_array_string_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_array_string_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_array_string(t,u);
#define _N_ARGS_array_string_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_array_string_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_array_string(v,w);
#define _N_ARGS_HELPER2_array_string(TYPE, N, ...)  _COMBINE_array_string(_N_ARGS_array_string_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_array_string(TYPE,...)    _N_ARGS_HELPER2_array_string(TYPE, _ARG_COUNT_array_string(__VA_ARGS__), ## __VA_ARGS__)
#define array_string(...) ({ \
    array_string instance = (array_string)A_alloc(typeid(array_string), 1, true); \
    _N_ARGS_array_string(array_string, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})
#ifndef NDEBUG
    //#define TC_array_map(MEMBER, VALUE) A_validate_type(VALUE, A_member(isa(instance), A_TYPE_PROP|A_TYPE_INTERN|A_TYPE_PRIV, #MEMBER)->type)
    #define TC_array_map(MEMBER, VALUE) VALUE
#else
    #define TC_array_map(MEMBER, VALUE) VALUE
#endif
#define _ARG_COUNT_IMPL_array_map(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, N, ...) N
#define _ARG_COUNT_I_array_map(...) _ARG_COUNT_IMPL_array_map(__VA_ARGS__, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define _ARG_COUNT_array_map(...)   _ARG_COUNT_I_array_map("A-type", ## __VA_ARGS__)
#define _COMBINE_array_map_(A, B)   A##B
#define _COMBINE_array_map(A, B)    _COMBINE_array_map_(A, B)
#define _N_ARGS_array_map_0( TYPE)
#define _N_ARGS_array_map_1( TYPE, a)
#define _N_ARGS_array_map_2( TYPE, a,b) instance->a = TC_array_map(a,b);
#define _N_ARGS_array_map_4( TYPE, a,b, c,d) _N_ARGS_array_map_2(TYPE, a,b) instance->c = TC_array_map(c,d);
#define _N_ARGS_array_map_6( TYPE, a,b, c,d, e,f) _N_ARGS_array_map_4(TYPE, a,b, c,d) instance->e = TC_array_map(e,f);
#define _N_ARGS_array_map_8( TYPE, a,b, c,d, e,f, g,h) _N_ARGS_array_map_6(TYPE, a,b, c,d, e,f) instance->g = TC_array_map(g,h);
#define _N_ARGS_array_map_10(TYPE, a,b, c,d, e,f, g,h, i,j) _N_ARGS_array_map_8(TYPE, a,b, c,d, e,f, g,h) instance->i = TC_array_map(i,j);
#define _N_ARGS_array_map_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) _N_ARGS_array_map_10(TYPE, a,b, c,d, e,f, g,h, i,j) instance->l = TC_array_map(l,m);
#define _N_ARGS_array_map_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) _N_ARGS_array_map_12(TYPE, a,b, c,d, e,f, g,h, i,j, l,m) instance->n = TC_array_map(n,o);
#define _N_ARGS_array_map_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) _N_ARGS_array_map_14(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o) instance->p = TC_array_map(p,q);
#define _N_ARGS_array_map_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) _N_ARGS_array_map_16(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q) instance->r = TC_array_map(r,s);
#define _N_ARGS_array_map_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) _N_ARGS_array_map_18(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s) instance->t = TC_array_map(t,u);
#define _N_ARGS_array_map_22(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u, v,w) _N_ARGS_array_map_20(TYPE, a,b, c,d, e,f, g,h, i,j, l,m, n,o, p,q, r,s, t,u) instance->v = TC_array_map(v,w);
#define _N_ARGS_HELPER2_array_map(TYPE, N, ...)  _COMBINE_array_map(_N_ARGS_array_map_, N)(TYPE, ## __VA_ARGS__)
#define _N_ARGS_array_map(TYPE,...)    _N_ARGS_HELPER2_array_map(TYPE, _ARG_COUNT_array_map(__VA_ARGS__), ## __VA_ARGS__)
#define array_map(...) ({ \
    array_map instance = (array_map)A_alloc(typeid(array_map), 1, true); \
    _N_ARGS_array_map(array_map, ## __VA_ARGS__); \
    A_initialize((object)instance); \
    instance; \
})

#endif /* _A_INIT_H_ */
